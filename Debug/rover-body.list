
rover-body.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e80  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003098  08003098  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030a0  080030a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  080030b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080030b4  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbf4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aac  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6ff  00000000  00000000  0002fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af66  00000000  00000000  0004d3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdc3f  00000000  00000000  0005834d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115f8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee4  00000000  00000000  00115fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003040 	.word	0x08003040

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003040 	.word	0x08003040

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fa93 	bl	8000a3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f807 	bl	800052a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f900 	bl	8000720 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000520:	f000 f8b4 	bl	800068c <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 8000524:	f000 f86c 	bl	8000600 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x18>

0800052a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b0a8      	sub	sp, #160	; 0xa0
 800052e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000530:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000534:	2238      	movs	r2, #56	; 0x38
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f002 fd79 	bl	8003030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2250      	movs	r2, #80	; 0x50
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f002 fd6b 	bl	8003030 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800055a:	2000      	movs	r0, #0
 800055c:	f000 ff6a 	bl	8001434 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000570:	2303      	movs	r3, #3
 8000572:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000576:	2303      	movs	r3, #3
 8000578:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800057c:	2328      	movs	r3, #40	; 0x28
 800057e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000598:	4618      	mov	r0, r3
 800059a:	f000 ffff 	bl	800159c <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005a4:	f000 f92c 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005c0:	2104      	movs	r1, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fb02 	bl	8001bcc <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005ce:	f000 f917 	bl	8000800 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_FDCAN;
 80005d2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80005d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80005dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fd39 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005f0:	f000 f906 	bl	8000800 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005f4:	f001 fcc0 	bl	8001f78 <HAL_RCC_EnableCSS>
}
 80005f8:	bf00      	nop
 80005fa:	37a0      	adds	r7, #160	; 0xa0
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000606:	4a20      	ldr	r2, [pc, #128]	; (8000688 <MX_FDCAN1_Init+0x88>)
 8000608:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_FDCAN1_Init+0x84>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_FDCAN1_Init+0x84>)
 800061e:	2200      	movs	r2, #0
 8000620:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000624:	2200      	movs	r2, #0
 8000626:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_FDCAN1_Init+0x84>)
 800062a:	2200      	movs	r2, #0
 800062c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000630:	2201      	movs	r2, #1
 8000632:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000636:	2201      	movs	r2, #1
 8000638:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_FDCAN1_Init+0x84>)
 800063c:	2202      	movs	r2, #2
 800063e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000642:	2202      	movs	r2, #2
 8000644:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000648:	2201      	movs	r2, #1
 800064a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_FDCAN1_Init+0x84>)
 800064e:	2201      	movs	r2, #1
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000654:	2201      	movs	r2, #1
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_FDCAN1_Init+0x84>)
 800065a:	2201      	movs	r2, #1
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000660:	2200      	movs	r2, #0
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000666:	2200      	movs	r2, #0
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_FDCAN1_Init+0x84>)
 800066c:	2200      	movs	r2, #0
 800066e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_FDCAN1_Init+0x84>)
 8000672:	f000 fb65 	bl	8000d40 <HAL_FDCAN_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800067c:	f000 f8c0 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000b8 	.word	0x200000b8
 8000688:	40006400 	.word	0x40006400

0800068c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 8000692:	4a22      	ldr	r2, [pc, #136]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 8000694:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006d0:	f001 ff00 	bl	80024d4 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 f891 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006e2:	f002 fbb7 	bl	8002e54 <HAL_UARTEx_SetTxFifoThreshold>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006ec:	f000 f888 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006f4:	f002 fbec 	bl	8002ed0 <HAL_UARTEx_SetRxFifoThreshold>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006fe:	f000 f87f 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 8000704:	f002 fb6d 	bl	8002de2 <HAL_UARTEx_DisableFifoMode>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800070e:	f000 f877 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000028 	.word	0x20000028
 800071c:	40008000 	.word	0x40008000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f000 fe0d 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_GPIO_Init+0xd8>)
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <MX_GPIO_Init+0xdc>)
 80007b8:	f000 fc7e 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007bc:	2320      	movs	r3, #32
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 fc6f 	bl	80010b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2028      	movs	r0, #40	; 0x28
 80007e0:	f000 fa79 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e4:	2028      	movs	r0, #40	; 0x28
 80007e6:	f000 fa90 	bl	8000d0a <HAL_NVIC_EnableIRQ>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	10110000 	.word	0x10110000
 80007fc:	48000800 	.word	0x48000800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6613      	str	r3, [r2, #96]	; 0x60
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6593      	str	r3, [r2, #88]	; 0x58
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000842:	f000 fe9b 	bl	800157c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <HAL_FDCAN_MspInit+0x80>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d129      	bne.n	80008ca <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_FDCAN_MspInit+0x84>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_FDCAN_MspInit+0x84>)
 800087c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000880:	6593      	str	r3, [r2, #88]	; 0x58
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_FDCAN_MspInit+0x84>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_FDCAN_MspInit+0x84>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <HAL_FDCAN_MspInit+0x84>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_FDCAN_MspInit+0x84>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008b8:	2309      	movs	r3, #9
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f000 fbf7 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40006400 	.word	0x40006400
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a17      	ldr	r2, [pc, #92]	; (8000958 <HAL_UART_MspInit+0x7c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d128      	bne.n	8000950 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <HAL_UART_MspInit+0x80>)
 8000900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000902:	4a16      	ldr	r2, [pc, #88]	; (800095c <HAL_UART_MspInit+0x80>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	65d3      	str	r3, [r2, #92]	; 0x5c
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_UART_MspInit+0x80>)
 800090c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_UART_MspInit+0x80>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_UART_MspInit+0x80>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_UART_MspInit+0x80>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800093e:	230c      	movs	r3, #12
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f000 fbb4 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40008000 	.word	0x40008000
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000964:	f001 fb18 	bl	8001f98 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x8>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f898 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009c0:	f000 fd14 	bl	80013ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490e      	ldr	r1, [pc, #56]	; (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0b      	ldr	r4, [pc, #44]	; (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a16:	f7ff ffd7 	bl	80009c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f002 fae5 	bl	8002fe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fd77 	bl	8000510 <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   r0, =_estack
 8000a24:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a30:	080030a8 	.word	0x080030a8
  ldr r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a38:	20000120 	.word	0x20000120

08000a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_2_IRQHandler>

08000a3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f939 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f80e 	bl	8000a70 <HAL_InitTick>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	e001      	b.n	8000a64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a60:	f7ff fed4 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a64:	79fb      	ldrb	r3, [r7, #7]

}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_InitTick+0x68>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d022      	beq.n	8000aca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_InitTick+0x6c>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_InitTick+0x68>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f944 	bl	8000d26 <HAL_SYSTICK_Config>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d10f      	bne.n	8000ac4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d809      	bhi.n	8000abe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab2:	f000 f910 	bl	8000cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_InitTick+0x70>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	e007      	b.n	8000ace <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e004      	b.n	8000ace <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
 8000ac8:	e001      	b.n	8000ace <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x20>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <HAL_IncTick+0x1c>)
 8000af4:	6013      	str	r3, [r2, #0]
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	2000011c 	.word	0x2000011c
 8000b04:	20000008 	.word	0x20000008

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	2000011c 	.word	0x2000011c

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	; (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	; (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff29 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff40 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff90 	bl	8000c14 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5f 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff33 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffa4 	bl	8000c7c <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e147      	b.n	8000fe2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d106      	bne.n	8000d6c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fd74 	bl	8000854 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	699a      	ldr	r2, [r3, #24]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0210 	bic.w	r2, r2, #16
 8000d7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d7c:	f7ff fec4 	bl	8000b08 <HAL_GetTick>
 8000d80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d82:	e012      	b.n	8000daa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d84:	f7ff fec0 	bl	8000b08 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d90b      	bls.n	8000daa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f043 0201 	orr.w	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2203      	movs	r2, #3
 8000da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e11b      	b.n	8000fe2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d0e5      	beq.n	8000d84 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	699a      	ldr	r2, [r3, #24]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0201 	orr.w	r2, r2, #1
 8000dc6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc8:	f7ff fe9e 	bl	8000b08 <HAL_GetTick>
 8000dcc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000dce:	e012      	b.n	8000df6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000dd0:	f7ff fe9a 	bl	8000b08 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b0a      	cmp	r3, #10
 8000ddc:	d90b      	bls.n	8000df6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	f043 0201 	orr.w	r2, r3, #1
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e0f5      	b.n	8000fe2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0e5      	beq.n	8000dd0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	699a      	ldr	r2, [r3, #24]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0202 	orr.w	r2, r2, #2
 8000e12:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a74      	ldr	r2, [pc, #464]	; (8000fec <HAL_FDCAN_Init+0x2ac>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d103      	bne.n	8000e26 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e1e:	4a74      	ldr	r2, [pc, #464]	; (8000ff0 <HAL_FDCAN_Init+0x2b0>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7c1b      	ldrb	r3, [r3, #16]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	699a      	ldr	r2, [r3, #24]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	e007      	b.n	8000e50 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	699a      	ldr	r2, [r3, #24]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e4e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7c5b      	ldrb	r3, [r3, #17]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	699a      	ldr	r2, [r3, #24]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e66:	619a      	str	r2, [r3, #24]
 8000e68:	e007      	b.n	8000e7a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	699a      	ldr	r2, [r3, #24]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e78:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7c9b      	ldrb	r3, [r3, #18]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e90:	619a      	str	r2, [r3, #24]
 8000e92:	e007      	b.n	8000ea4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ea2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	699a      	ldr	r2, [r3, #24]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000ec8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0210 	bic.w	r2, r2, #16
 8000ed8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d108      	bne.n	8000ef4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	699a      	ldr	r2, [r3, #24]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0204 	orr.w	r2, r2, #4
 8000ef0:	619a      	str	r2, [r3, #24]
 8000ef2:	e02c      	b.n	8000f4e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d028      	beq.n	8000f4e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d01c      	beq.n	8000f3e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f12:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0210 	orr.w	r2, r2, #16
 8000f22:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d110      	bne.n	8000f4e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	699a      	ldr	r2, [r3, #24]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	619a      	str	r2, [r3, #24]
 8000f3c:	e007      	b.n	8000f4e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	699a      	ldr	r2, [r3, #24]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0220 	orr.w	r2, r2, #32
 8000f4c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f5e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f66:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f76:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f78:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f82:	d115      	bne.n	8000fb0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f92:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f9c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000fac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f814 	bl	8000ff4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40006400 	.word	0x40006400
 8000ff0:	40006500 	.word	0x40006500

08000ff4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8000ffe:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d103      	bne.n	8001012 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001010:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001020:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001028:	041a      	lsls	r2, r3, #16
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001046:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	061a      	lsls	r2, r3, #24
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e005      	b.n	8001094 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3304      	adds	r3, #4
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3f3      	bcc.n	8001088 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	4000a400 	.word	0x4000a400
 80010b4:	40006800 	.word	0x40006800

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010c6:	e15a      	b.n	800137e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 814c 	beq.w	8001378 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00b      	beq.n	8001100 <HAL_GPIO_Init+0x48>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0xea>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0203 	and.w	r2, r3, #3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80a6 	beq.w	8001378 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122c:	4b5b      	ldr	r3, [pc, #364]	; (800139c <HAL_GPIO_Init+0x2e4>)
 800122e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001230:	4a5a      	ldr	r2, [pc, #360]	; (800139c <HAL_GPIO_Init+0x2e4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6613      	str	r3, [r2, #96]	; 0x60
 8001238:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_GPIO_Init+0x2e4>)
 800123a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001244:	4a56      	ldr	r2, [pc, #344]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800126e:	d01f      	beq.n	80012b0 <HAL_GPIO_Init+0x1f8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a4c      	ldr	r2, [pc, #304]	; (80013a4 <HAL_GPIO_Init+0x2ec>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d019      	beq.n	80012ac <HAL_GPIO_Init+0x1f4>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a4b      	ldr	r2, [pc, #300]	; (80013a8 <HAL_GPIO_Init+0x2f0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d013      	beq.n	80012a8 <HAL_GPIO_Init+0x1f0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a4a      	ldr	r2, [pc, #296]	; (80013ac <HAL_GPIO_Init+0x2f4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d00d      	beq.n	80012a4 <HAL_GPIO_Init+0x1ec>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a49      	ldr	r2, [pc, #292]	; (80013b0 <HAL_GPIO_Init+0x2f8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d007      	beq.n	80012a0 <HAL_GPIO_Init+0x1e8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_GPIO_Init+0x2fc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d101      	bne.n	800129c <HAL_GPIO_Init+0x1e4>
 8001298:	2305      	movs	r3, #5
 800129a:	e00a      	b.n	80012b2 <HAL_GPIO_Init+0x1fa>
 800129c:	2306      	movs	r3, #6
 800129e:	e008      	b.n	80012b2 <HAL_GPIO_Init+0x1fa>
 80012a0:	2304      	movs	r3, #4
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x1fa>
 80012a4:	2303      	movs	r3, #3
 80012a6:	e004      	b.n	80012b2 <HAL_GPIO_Init+0x1fa>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x1fa>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_GPIO_Init+0x1fa>
 80012b0:	2300      	movs	r3, #0
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	f002 0203 	and.w	r2, r2, #3
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4093      	lsls	r3, r2
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c2:	4937      	ldr	r1, [pc, #220]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <HAL_GPIO_Init+0x300>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f4:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <HAL_GPIO_Init+0x300>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012fa:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_GPIO_Init+0x300>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800131e:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <HAL_GPIO_Init+0x300>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_GPIO_Init+0x300>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <HAL_GPIO_Init+0x300>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_GPIO_Init+0x300>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001372:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <HAL_GPIO_Init+0x300>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	f47f ae9d 	bne.w	80010c8 <HAL_GPIO_Init+0x10>
  }
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48000800 	.word	0x48000800
 80013ac:	48000c00 	.word	0x48000c00
 80013b0:	48001000 	.word	0x48001000
 80013b4:	48001400 	.word	0x48001400
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f806 	bl	800141c <HAL_GPIO_EXTI_Callback>
  }
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d141      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001442:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d131      	bne.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001450:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001456:	4a46      	ldr	r2, [pc, #280]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800145c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001468:	4a41      	ldr	r2, [pc, #260]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2232      	movs	r2, #50	; 0x32
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	4a3f      	ldr	r2, [pc, #252]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	0c9b      	lsrs	r3, r3, #18
 8001482:	3301      	adds	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001486:	e002      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3b01      	subs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149a:	d102      	bne.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f2      	bne.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ae:	d158      	bne.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e057      	b.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b4:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ba:	4a2d      	ldr	r2, [pc, #180]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014c4:	e04d      	b.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014cc:	d141      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014da:	d131      	bne.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014e2:	4a23      	ldr	r2, [pc, #140]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f4:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2232      	movs	r2, #50	; 0x32
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	0c9b      	lsrs	r3, r3, #18
 800150e:	3301      	adds	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001512:	e002      	b.n	800151a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3b01      	subs	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001526:	d102      	bne.n	800152e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f2      	bne.n	8001514 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153a:	d112      	bne.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e011      	b.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001550:	e007      	b.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001560:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40007000 	.word	0x40007000
 8001574:	20000000 	.word	0x20000000
 8001578:	431bde83 	.word	0x431bde83

0800157c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6093      	str	r3, [r2, #8]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40007000 	.word	0x40007000

0800159c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e308      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ba:	4ba3      	ldr	r3, [pc, #652]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c4:	4ba0      	ldr	r3, [pc, #640]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b0c      	cmp	r3, #12
 80015d2:	d102      	bne.n	80015da <HAL_RCC_OscConfig+0x3e>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_OscConfig+0x44>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d10b      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4b99      	ldr	r3, [pc, #612]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d05b      	beq.n	80016a4 <HAL_RCC_OscConfig+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d157      	bne.n	80016a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e2e3      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x74>
 8001602:	4b91      	ldr	r3, [pc, #580]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a90      	ldr	r2, [pc, #576]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e01d      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x98>
 800161a:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a8a      	ldr	r2, [pc, #552]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a87      	ldr	r2, [pc, #540]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a83      	ldr	r2, [pc, #524]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b81      	ldr	r3, [pc, #516]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a80      	ldr	r2, [pc, #512]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fa58 	bl	8000b08 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fa54 	bl	8000b08 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e2a8      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0xc0>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fa44 	bl	8000b08 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fa40 	bl	8000b08 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e294      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0xe8>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d075      	beq.n	800179e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b2:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016bc:	4b62      	ldr	r3, [pc, #392]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b0c      	cmp	r3, #12
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_OscConfig+0x136>
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d002      	beq.n	80016d8 <HAL_RCC_OscConfig+0x13c>
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d11f      	bne.n	8001718 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d8:	4b5b      	ldr	r3, [pc, #364]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x154>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e267      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b55      	ldr	r3, [pc, #340]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	4952      	ldr	r1, [pc, #328]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001704:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_RCC_OscConfig+0x2b0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff f9b1 	bl	8000a70 <HAL_InitTick>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d043      	beq.n	800179c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e253      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b49      	ldr	r3, [pc, #292]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a48      	ldr	r2, [pc, #288]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff f9ec 	bl	8000b08 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff f9e8 	bl	8000b08 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e23c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001746:	4b40      	ldr	r3, [pc, #256]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	061b      	lsls	r3, r3, #24
 8001760:	4939      	ldr	r1, [pc, #228]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
 8001766:	e01a      	b.n	800179e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001768:	4b37      	ldr	r3, [pc, #220]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a36      	ldr	r2, [pc, #216]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800176e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff f9c8 	bl	8000b08 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff f9c4 	bl	8000b08 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e218      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1e0>
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800179c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d03c      	beq.n	8001824 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d01c      	beq.n	80017ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b8:	4a23      	ldr	r2, [pc, #140]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff f9a1 	bl	8000b08 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff f99d 	bl	8000b08 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1f1      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0ef      	beq.n	80017ca <HAL_RCC_OscConfig+0x22e>
 80017ea:	e01b      	b.n	8001824 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff f984 	bl	8000b08 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff f980 	bl	8000b08 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1d4      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ef      	bne.n	8001804 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80ab 	beq.w	8001988 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d106      	bne.n	8001850 <HAL_RCC_OscConfig+0x2b4>
 8001842:	2301      	movs	r3, #1
 8001844:	e005      	b.n	8001852 <HAL_RCC_OscConfig+0x2b6>
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	20000004 	.word	0x20000004
 8001850:	2300      	movs	r3, #0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4baf      	ldr	r3, [pc, #700]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	4aae      	ldr	r2, [pc, #696]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6593      	str	r3, [r2, #88]	; 0x58
 8001862:	4bac      	ldr	r3, [pc, #688]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001872:	4ba9      	ldr	r3, [pc, #676]	; (8001b18 <HAL_RCC_OscConfig+0x57c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d118      	bne.n	80018b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800187e:	4ba6      	ldr	r3, [pc, #664]	; (8001b18 <HAL_RCC_OscConfig+0x57c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4aa5      	ldr	r2, [pc, #660]	; (8001b18 <HAL_RCC_OscConfig+0x57c>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7ff f93d 	bl	8000b08 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff f939 	bl	8000b08 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e18d      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a4:	4b9c      	ldr	r3, [pc, #624]	; (8001b18 <HAL_RCC_OscConfig+0x57c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d108      	bne.n	80018ca <HAL_RCC_OscConfig+0x32e>
 80018b8:	4b96      	ldr	r3, [pc, #600]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018be:	4a95      	ldr	r2, [pc, #596]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c8:	e024      	b.n	8001914 <HAL_RCC_OscConfig+0x378>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d110      	bne.n	80018f4 <HAL_RCC_OscConfig+0x358>
 80018d2:	4b90      	ldr	r3, [pc, #576]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80018d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d8:	4a8e      	ldr	r2, [pc, #568]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e2:	4b8c      	ldr	r3, [pc, #560]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	4a8a      	ldr	r2, [pc, #552]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f2:	e00f      	b.n	8001914 <HAL_RCC_OscConfig+0x378>
 80018f4:	4b87      	ldr	r3, [pc, #540]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	4a86      	ldr	r2, [pc, #536]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001904:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	4a82      	ldr	r2, [pc, #520]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d016      	beq.n	800194a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff f8f4 	bl	8000b08 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff f8f0 	bl	8000b08 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e142      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193a:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ed      	beq.n	8001924 <HAL_RCC_OscConfig+0x388>
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194a:	f7ff f8dd 	bl	8000b08 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff f8d9 	bl	8000b08 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e12b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ed      	bne.n	8001952 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001976:	7ffb      	ldrb	r3, [r7, #31]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	4a64      	ldr	r2, [pc, #400]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001986:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	2b00      	cmp	r3, #0
 8001992:	d03c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800199c:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 800199e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a2:	4a5c      	ldr	r2, [pc, #368]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff f8ac 	bl	8000b08 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b4:	f7ff f8a8 	bl	8000b08 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e0fc      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019c6:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80019c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ef      	beq.n	80019b4 <HAL_RCC_OscConfig+0x418>
 80019d4:	e01b      	b.n	8001a0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019d6:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80019d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019dc:	4a4d      	ldr	r2, [pc, #308]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff f88f 	bl	8000b08 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ee:	f7ff f88b 	bl	8000b08 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0df      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a00:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ef      	bne.n	80019ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80d3 	beq.w	8001bbe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a18:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	f000 808d 	beq.w	8001b40 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d15a      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a38      	ldr	r2, [pc, #224]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f865 	bl	8000b08 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7ff f861 	bl	8000b08 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0b5      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f0      	bne.n	8001a42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_RCC_OscConfig+0x580>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6a11      	ldr	r1, [r2, #32]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a70:	3a01      	subs	r2, #1
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	4311      	orrs	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a7a:	0212      	lsls	r2, r2, #8
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a82:	0852      	lsrs	r2, r2, #1
 8001a84:	3a01      	subs	r2, #1
 8001a86:	0552      	lsls	r2, r2, #21
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a8e:	0852      	lsrs	r2, r2, #1
 8001a90:	3a01      	subs	r2, #1
 8001a92:	0652      	lsls	r2, r2, #25
 8001a94:	4311      	orrs	r1, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a9a:	06d2      	lsls	r2, r2, #27
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	491d      	ldr	r1, [pc, #116]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff f824 	bl	8000b08 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f820 	bl	8000b08 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e074      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x528>
 8001ae2:	e06c      	b.n	8001bbe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_RCC_OscConfig+0x578>)
 8001b02:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7fe fffc 	bl	8000b08 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b12:	e00e      	b.n	8001b32 <HAL_RCC_OscConfig+0x596>
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7fe fff2 	bl	8000b08 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e046      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_RCC_OscConfig+0x62c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x584>
 8001b3e:	e03e      	b.n	8001bbe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e039      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_RCC_OscConfig+0x62c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d12c      	bne.n	8001bba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d123      	bne.n	8001bba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d11b      	bne.n	8001bba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d113      	bne.n	8001bba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	085b      	lsrs	r3, r3, #1
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e11e      	b.n	8001e22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be4:	4b91      	ldr	r3, [pc, #580]	; (8001e2c <HAL_RCC_ClockConfig+0x260>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d910      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b8e      	ldr	r3, [pc, #568]	; (8001e2c <HAL_RCC_ClockConfig+0x260>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 020f 	bic.w	r2, r3, #15
 8001bfa:	498c      	ldr	r1, [pc, #560]	; (8001e2c <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b8a      	ldr	r3, [pc, #552]	; (8001e2c <HAL_RCC_ClockConfig+0x260>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e106      	b.n	8001e22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d073      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d129      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c28:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0f4      	b.n	8001e22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c38:	f000 f9ca 	bl	8001fd0 <RCC_GetSysClockFreqFromPLLSource>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4a7c      	ldr	r2, [pc, #496]	; (8001e34 <HAL_RCC_ClockConfig+0x268>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d93f      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c46:	4b7a      	ldr	r3, [pc, #488]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d033      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d12f      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c66:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c6e:	4a70      	ldr	r2, [pc, #448]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e024      	b.n	8001cc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c84:	4b6a      	ldr	r3, [pc, #424]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0c6      	b.n	8001e22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c94:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0be      	b.n	8001e22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ca4:	f000 f8ce 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4a61      	ldr	r2, [pc, #388]	; (8001e34 <HAL_RCC_ClockConfig+0x268>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d909      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cb2:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cba:	4a5d      	ldr	r2, [pc, #372]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc6:	4b5a      	ldr	r3, [pc, #360]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4957      	ldr	r1, [pc, #348]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd8:	f7fe ff16 	bl	8000b08 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce0:	f7fe ff12 	bl	8000b08 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e095      	b.n	8001e22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 020c 	and.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1eb      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d20:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a42      	ldr	r2, [pc, #264]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d38:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d40:	4a3b      	ldr	r2, [pc, #236]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001d42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4936      	ldr	r1, [pc, #216]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b80      	cmp	r3, #128	; 0x80
 8001d60:	d105      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d62:	4b33      	ldr	r3, [pc, #204]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4a32      	ldr	r2, [pc, #200]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001d68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_RCC_ClockConfig+0x260>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d21d      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_RCC_ClockConfig+0x260>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 020f 	bic.w	r2, r3, #15
 8001d84:	4929      	ldr	r1, [pc, #164]	; (8001e2c <HAL_RCC_ClockConfig+0x260>)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d8c:	f7fe febc 	bl	8000b08 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7fe feb8 	bl	8000b08 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e03b      	b.n	8001e22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <HAL_RCC_ClockConfig+0x260>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1ed      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4917      	ldr	r1, [pc, #92]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	490f      	ldr	r1, [pc, #60]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df6:	f000 f825 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_RCC_ClockConfig+0x264>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	490c      	ldr	r1, [pc, #48]	; (8001e38 <HAL_RCC_ClockConfig+0x26c>)
 8001e08:	5ccb      	ldrb	r3, [r1, r3]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_RCC_ClockConfig+0x270>)
 8001e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_ClockConfig+0x274>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fe28 	bl	8000a70 <HAL_InitTick>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	04c4b400 	.word	0x04c4b400
 8001e38:	08003058 	.word	0x08003058
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004

08001e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d102      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e047      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d102      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e03e      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d136      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	4a16      	ldr	r2, [pc, #88]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea2:	68d2      	ldr	r2, [r2, #12]
 8001ea4:	0a12      	lsrs	r2, r2, #8
 8001ea6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
      break;
 8001eb0:	e00c      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eb2:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebc:	68d2      	ldr	r2, [r2, #12]
 8001ebe:	0a12      	lsrs	r2, r2, #8
 8001ec0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
      break;
 8001eca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0e5b      	lsrs	r3, r3, #25
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	e001      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001eec:	693b      	ldr	r3, [r7, #16]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	016e3600 	.word	0x016e3600

08001f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000000 	.word	0x20000000

08001f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f24:	f7ff fff0 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4904      	ldr	r1, [pc, #16]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08003068 	.word	0x08003068

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f50:	f7ff ffda 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0adb      	lsrs	r3, r3, #11
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4904      	ldr	r1, [pc, #16]	; (8001f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	08003068 	.word	0x08003068

08001f78 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_EnableCSS+0x1c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_RCC_EnableCSS+0x1c>)
 8001f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <HAL_RCC_NMI_IRQHandler+0x24>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001faa:	f000 f809 	bl	8001fc0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001fae:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_RCC_NMI_IRQHandler+0x24>)
 8001fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb4:	621a      	str	r2, [r3, #32]
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3301      	adds	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d10c      	bne.n	800200e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ffe:	68d2      	ldr	r2, [r2, #12]
 8002000:	0a12      	lsrs	r2, r2, #8
 8002002:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
    break;
 800200c:	e00c      	b.n	8002028 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002018:	68d2      	ldr	r2, [r2, #12]
 800201a:	0a12      	lsrs	r2, r2, #8
 800201c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    break;
 8002026:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0e5b      	lsrs	r3, r3, #25
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	016e3600 	.word	0x016e3600
 8002058:	00f42400 	.word	0x00f42400

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002064:	2300      	movs	r3, #0
 8002066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002068:	2300      	movs	r3, #0
 800206a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8098 	beq.w	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10d      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b40      	ldr	r3, [pc, #256]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	4a3f      	ldr	r2, [pc, #252]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	6593      	str	r3, [r2, #88]	; 0x58
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a6:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a39      	ldr	r2, [pc, #228]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b2:	f7fe fd29 	bl	8000b08 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b8:	e009      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe fd25 	bl	8000b08 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d902      	bls.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	74fb      	strb	r3, [r7, #19]
        break;
 80020cc:	e005      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ef      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d159      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01e      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d019      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe fce5 	bl	8000b08 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002140:	e00b      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fce1 	bl	8000b08 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d902      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	74fb      	strb	r3, [r7, #19]
            break;
 8002158:	e006      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ec      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002184:	e008      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	74bb      	strb	r3, [r7, #18]
 800218a:	e005      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002198:	7c7b      	ldrb	r3, [r7, #17]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4bac      	ldr	r3, [pc, #688]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	4aab      	ldr	r2, [pc, #684]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b6:	4ba6      	ldr	r3, [pc, #664]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 0203 	bic.w	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	49a2      	ldr	r1, [pc, #648]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d8:	4b9d      	ldr	r3, [pc, #628]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 020c 	bic.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	499a      	ldr	r1, [pc, #616]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021fa:	4b95      	ldr	r3, [pc, #596]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4991      	ldr	r1, [pc, #580]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800221c:	4b8c      	ldr	r3, [pc, #560]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	4989      	ldr	r1, [pc, #548]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800223e:	4b84      	ldr	r3, [pc, #528]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	4980      	ldr	r1, [pc, #512]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002260:	4b7b      	ldr	r3, [pc, #492]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	4978      	ldr	r1, [pc, #480]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	4b73      	ldr	r3, [pc, #460]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	496f      	ldr	r1, [pc, #444]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4967      	ldr	r1, [pc, #412]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c6:	4b62      	ldr	r3, [pc, #392]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	495e      	ldr	r1, [pc, #376]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022e8:	4b59      	ldr	r3, [pc, #356]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	4956      	ldr	r1, [pc, #344]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002306:	2b00      	cmp	r3, #0
 8002308:	d015      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800230a:	4b51      	ldr	r3, [pc, #324]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	494d      	ldr	r1, [pc, #308]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002328:	d105      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232a:	4b49      	ldr	r3, [pc, #292]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4a48      	ldr	r2, [pc, #288]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002334:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002342:	4b43      	ldr	r3, [pc, #268]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	493f      	ldr	r1, [pc, #252]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002360:	d105      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002362:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a3a      	ldr	r2, [pc, #232]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800236c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800237a:	4b35      	ldr	r3, [pc, #212]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002388:	4931      	ldr	r1, [pc, #196]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d105      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4a2c      	ldr	r2, [pc, #176]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b2:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c0:	4923      	ldr	r1, [pc, #140]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d0:	d105      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d2:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023dc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d015      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	4915      	ldr	r1, [pc, #84]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002408:	d105      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002414:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d018      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4907      	ldr	r1, [pc, #28]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002440:	d108      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002442:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4a02      	ldr	r2, [pc, #8]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	60d3      	str	r3, [r2, #12]
 800244e:	e001      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002450:	40021000 	.word	0x40021000
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d015      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4918      	ldr	r1, [pc, #96]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247e:	d105      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800249a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800249e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a6:	490a      	ldr	r1, [pc, #40]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024b6:	d105      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80024be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e042      	b.n	800256c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7fe f9ef 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2224      	movs	r2, #36	; 0x24
 8002502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f82c 	bl	8002574 <UART_SetConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e022      	b.n	800256c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 faea 	bl	8002b08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fb71 	bl	8002c4c <UART_CheckIdleState>
 800256a:	4603      	mov	r3, r0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	4313      	orrs	r3, r2
 8002596:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4bb1      	ldr	r3, [pc, #708]	; (8002864 <UART_SetConfig+0x2f0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	69f9      	ldr	r1, [r7, #28]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4aa6      	ldr	r2, [pc, #664]	; (8002868 <UART_SetConfig+0x2f4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80025e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	69f9      	ldr	r1, [r7, #28]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f023 010f 	bic.w	r1, r3, #15
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a97      	ldr	r2, [pc, #604]	; (800286c <UART_SetConfig+0x2f8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d120      	bne.n	8002656 <UART_SetConfig+0xe2>
 8002614:	4b96      	ldr	r3, [pc, #600]	; (8002870 <UART_SetConfig+0x2fc>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b03      	cmp	r3, #3
 8002620:	d816      	bhi.n	8002650 <UART_SetConfig+0xdc>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <UART_SetConfig+0xb4>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	08002639 	.word	0x08002639
 800262c:	08002645 	.word	0x08002645
 8002630:	0800263f 	.word	0x0800263f
 8002634:	0800264b 	.word	0x0800264b
 8002638:	2301      	movs	r3, #1
 800263a:	76fb      	strb	r3, [r7, #27]
 800263c:	e0e7      	b.n	800280e <UART_SetConfig+0x29a>
 800263e:	2302      	movs	r3, #2
 8002640:	76fb      	strb	r3, [r7, #27]
 8002642:	e0e4      	b.n	800280e <UART_SetConfig+0x29a>
 8002644:	2304      	movs	r3, #4
 8002646:	76fb      	strb	r3, [r7, #27]
 8002648:	e0e1      	b.n	800280e <UART_SetConfig+0x29a>
 800264a:	2308      	movs	r3, #8
 800264c:	76fb      	strb	r3, [r7, #27]
 800264e:	e0de      	b.n	800280e <UART_SetConfig+0x29a>
 8002650:	2310      	movs	r3, #16
 8002652:	76fb      	strb	r3, [r7, #27]
 8002654:	e0db      	b.n	800280e <UART_SetConfig+0x29a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a86      	ldr	r2, [pc, #536]	; (8002874 <UART_SetConfig+0x300>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d132      	bne.n	80026c6 <UART_SetConfig+0x152>
 8002660:	4b83      	ldr	r3, [pc, #524]	; (8002870 <UART_SetConfig+0x2fc>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d828      	bhi.n	80026c0 <UART_SetConfig+0x14c>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <UART_SetConfig+0x100>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	080026a9 	.word	0x080026a9
 8002678:	080026c1 	.word	0x080026c1
 800267c:	080026c1 	.word	0x080026c1
 8002680:	080026c1 	.word	0x080026c1
 8002684:	080026b5 	.word	0x080026b5
 8002688:	080026c1 	.word	0x080026c1
 800268c:	080026c1 	.word	0x080026c1
 8002690:	080026c1 	.word	0x080026c1
 8002694:	080026af 	.word	0x080026af
 8002698:	080026c1 	.word	0x080026c1
 800269c:	080026c1 	.word	0x080026c1
 80026a0:	080026c1 	.word	0x080026c1
 80026a4:	080026bb 	.word	0x080026bb
 80026a8:	2300      	movs	r3, #0
 80026aa:	76fb      	strb	r3, [r7, #27]
 80026ac:	e0af      	b.n	800280e <UART_SetConfig+0x29a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	76fb      	strb	r3, [r7, #27]
 80026b2:	e0ac      	b.n	800280e <UART_SetConfig+0x29a>
 80026b4:	2304      	movs	r3, #4
 80026b6:	76fb      	strb	r3, [r7, #27]
 80026b8:	e0a9      	b.n	800280e <UART_SetConfig+0x29a>
 80026ba:	2308      	movs	r3, #8
 80026bc:	76fb      	strb	r3, [r7, #27]
 80026be:	e0a6      	b.n	800280e <UART_SetConfig+0x29a>
 80026c0:	2310      	movs	r3, #16
 80026c2:	76fb      	strb	r3, [r7, #27]
 80026c4:	e0a3      	b.n	800280e <UART_SetConfig+0x29a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6b      	ldr	r2, [pc, #428]	; (8002878 <UART_SetConfig+0x304>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d120      	bne.n	8002712 <UART_SetConfig+0x19e>
 80026d0:	4b67      	ldr	r3, [pc, #412]	; (8002870 <UART_SetConfig+0x2fc>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026da:	2b30      	cmp	r3, #48	; 0x30
 80026dc:	d013      	beq.n	8002706 <UART_SetConfig+0x192>
 80026de:	2b30      	cmp	r3, #48	; 0x30
 80026e0:	d814      	bhi.n	800270c <UART_SetConfig+0x198>
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d009      	beq.n	80026fa <UART_SetConfig+0x186>
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d810      	bhi.n	800270c <UART_SetConfig+0x198>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <UART_SetConfig+0x180>
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d006      	beq.n	8002700 <UART_SetConfig+0x18c>
 80026f2:	e00b      	b.n	800270c <UART_SetConfig+0x198>
 80026f4:	2300      	movs	r3, #0
 80026f6:	76fb      	strb	r3, [r7, #27]
 80026f8:	e089      	b.n	800280e <UART_SetConfig+0x29a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	76fb      	strb	r3, [r7, #27]
 80026fe:	e086      	b.n	800280e <UART_SetConfig+0x29a>
 8002700:	2304      	movs	r3, #4
 8002702:	76fb      	strb	r3, [r7, #27]
 8002704:	e083      	b.n	800280e <UART_SetConfig+0x29a>
 8002706:	2308      	movs	r3, #8
 8002708:	76fb      	strb	r3, [r7, #27]
 800270a:	e080      	b.n	800280e <UART_SetConfig+0x29a>
 800270c:	2310      	movs	r3, #16
 800270e:	76fb      	strb	r3, [r7, #27]
 8002710:	e07d      	b.n	800280e <UART_SetConfig+0x29a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a59      	ldr	r2, [pc, #356]	; (800287c <UART_SetConfig+0x308>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d120      	bne.n	800275e <UART_SetConfig+0x1ea>
 800271c:	4b54      	ldr	r3, [pc, #336]	; (8002870 <UART_SetConfig+0x2fc>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002726:	2bc0      	cmp	r3, #192	; 0xc0
 8002728:	d013      	beq.n	8002752 <UART_SetConfig+0x1de>
 800272a:	2bc0      	cmp	r3, #192	; 0xc0
 800272c:	d814      	bhi.n	8002758 <UART_SetConfig+0x1e4>
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d009      	beq.n	8002746 <UART_SetConfig+0x1d2>
 8002732:	2b80      	cmp	r3, #128	; 0x80
 8002734:	d810      	bhi.n	8002758 <UART_SetConfig+0x1e4>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <UART_SetConfig+0x1cc>
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d006      	beq.n	800274c <UART_SetConfig+0x1d8>
 800273e:	e00b      	b.n	8002758 <UART_SetConfig+0x1e4>
 8002740:	2300      	movs	r3, #0
 8002742:	76fb      	strb	r3, [r7, #27]
 8002744:	e063      	b.n	800280e <UART_SetConfig+0x29a>
 8002746:	2302      	movs	r3, #2
 8002748:	76fb      	strb	r3, [r7, #27]
 800274a:	e060      	b.n	800280e <UART_SetConfig+0x29a>
 800274c:	2304      	movs	r3, #4
 800274e:	76fb      	strb	r3, [r7, #27]
 8002750:	e05d      	b.n	800280e <UART_SetConfig+0x29a>
 8002752:	2308      	movs	r3, #8
 8002754:	76fb      	strb	r3, [r7, #27]
 8002756:	e05a      	b.n	800280e <UART_SetConfig+0x29a>
 8002758:	2310      	movs	r3, #16
 800275a:	76fb      	strb	r3, [r7, #27]
 800275c:	e057      	b.n	800280e <UART_SetConfig+0x29a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a47      	ldr	r2, [pc, #284]	; (8002880 <UART_SetConfig+0x30c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d125      	bne.n	80027b4 <UART_SetConfig+0x240>
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <UART_SetConfig+0x2fc>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002776:	d017      	beq.n	80027a8 <UART_SetConfig+0x234>
 8002778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800277c:	d817      	bhi.n	80027ae <UART_SetConfig+0x23a>
 800277e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002782:	d00b      	beq.n	800279c <UART_SetConfig+0x228>
 8002784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002788:	d811      	bhi.n	80027ae <UART_SetConfig+0x23a>
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <UART_SetConfig+0x222>
 800278e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002792:	d006      	beq.n	80027a2 <UART_SetConfig+0x22e>
 8002794:	e00b      	b.n	80027ae <UART_SetConfig+0x23a>
 8002796:	2300      	movs	r3, #0
 8002798:	76fb      	strb	r3, [r7, #27]
 800279a:	e038      	b.n	800280e <UART_SetConfig+0x29a>
 800279c:	2302      	movs	r3, #2
 800279e:	76fb      	strb	r3, [r7, #27]
 80027a0:	e035      	b.n	800280e <UART_SetConfig+0x29a>
 80027a2:	2304      	movs	r3, #4
 80027a4:	76fb      	strb	r3, [r7, #27]
 80027a6:	e032      	b.n	800280e <UART_SetConfig+0x29a>
 80027a8:	2308      	movs	r3, #8
 80027aa:	76fb      	strb	r3, [r7, #27]
 80027ac:	e02f      	b.n	800280e <UART_SetConfig+0x29a>
 80027ae:	2310      	movs	r3, #16
 80027b0:	76fb      	strb	r3, [r7, #27]
 80027b2:	e02c      	b.n	800280e <UART_SetConfig+0x29a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <UART_SetConfig+0x2f4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d125      	bne.n	800280a <UART_SetConfig+0x296>
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <UART_SetConfig+0x2fc>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027cc:	d017      	beq.n	80027fe <UART_SetConfig+0x28a>
 80027ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027d2:	d817      	bhi.n	8002804 <UART_SetConfig+0x290>
 80027d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027d8:	d00b      	beq.n	80027f2 <UART_SetConfig+0x27e>
 80027da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027de:	d811      	bhi.n	8002804 <UART_SetConfig+0x290>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <UART_SetConfig+0x278>
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d006      	beq.n	80027f8 <UART_SetConfig+0x284>
 80027ea:	e00b      	b.n	8002804 <UART_SetConfig+0x290>
 80027ec:	2300      	movs	r3, #0
 80027ee:	76fb      	strb	r3, [r7, #27]
 80027f0:	e00d      	b.n	800280e <UART_SetConfig+0x29a>
 80027f2:	2302      	movs	r3, #2
 80027f4:	76fb      	strb	r3, [r7, #27]
 80027f6:	e00a      	b.n	800280e <UART_SetConfig+0x29a>
 80027f8:	2304      	movs	r3, #4
 80027fa:	76fb      	strb	r3, [r7, #27]
 80027fc:	e007      	b.n	800280e <UART_SetConfig+0x29a>
 80027fe:	2308      	movs	r3, #8
 8002800:	76fb      	strb	r3, [r7, #27]
 8002802:	e004      	b.n	800280e <UART_SetConfig+0x29a>
 8002804:	2310      	movs	r3, #16
 8002806:	76fb      	strb	r3, [r7, #27]
 8002808:	e001      	b.n	800280e <UART_SetConfig+0x29a>
 800280a:	2310      	movs	r3, #16
 800280c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a15      	ldr	r2, [pc, #84]	; (8002868 <UART_SetConfig+0x2f4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	f040 809f 	bne.w	8002958 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800281a:	7efb      	ldrb	r3, [r7, #27]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d837      	bhi.n	8002890 <UART_SetConfig+0x31c>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <UART_SetConfig+0x2b4>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	0800284d 	.word	0x0800284d
 800282c:	08002891 	.word	0x08002891
 8002830:	08002855 	.word	0x08002855
 8002834:	08002891 	.word	0x08002891
 8002838:	0800285b 	.word	0x0800285b
 800283c:	08002891 	.word	0x08002891
 8002840:	08002891 	.word	0x08002891
 8002844:	08002891 	.word	0x08002891
 8002848:	08002889 	.word	0x08002889
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800284c:	f7ff fb68 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002850:	6178      	str	r0, [r7, #20]
        break;
 8002852:	e022      	b.n	800289a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <UART_SetConfig+0x310>)
 8002856:	617b      	str	r3, [r7, #20]
        break;
 8002858:	e01f      	b.n	800289a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800285a:	f7ff faf3 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 800285e:	6178      	str	r0, [r7, #20]
        break;
 8002860:	e01b      	b.n	800289a <UART_SetConfig+0x326>
 8002862:	bf00      	nop
 8002864:	cfff69f3 	.word	0xcfff69f3
 8002868:	40008000 	.word	0x40008000
 800286c:	40013800 	.word	0x40013800
 8002870:	40021000 	.word	0x40021000
 8002874:	40004400 	.word	0x40004400
 8002878:	40004800 	.word	0x40004800
 800287c:	40004c00 	.word	0x40004c00
 8002880:	40005000 	.word	0x40005000
 8002884:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800288c:	617b      	str	r3, [r7, #20]
        break;
 800288e:	e004      	b.n	800289a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	76bb      	strb	r3, [r7, #26]
        break;
 8002898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 811b 	beq.w	8002ad8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	4a96      	ldr	r2, [pc, #600]	; (8002b00 <UART_SetConfig+0x58c>)
 80028a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028ac:	461a      	mov	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80028b4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d305      	bcc.n	80028d2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d902      	bls.n	80028d8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	76bb      	strb	r3, [r7, #26]
 80028d6:	e0ff      	b.n	8002ad8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4618      	mov	r0, r3
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	4a86      	ldr	r2, [pc, #536]	; (8002b00 <UART_SetConfig+0x58c>)
 80028e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f7fd fc92 	bl	8000218 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	020b      	lsls	r3, r1, #8
 8002906:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800290a:	0202      	lsls	r2, r0, #8
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	6849      	ldr	r1, [r1, #4]
 8002910:	0849      	lsrs	r1, r1, #1
 8002912:	4608      	mov	r0, r1
 8002914:	f04f 0100 	mov.w	r1, #0
 8002918:	1814      	adds	r4, r2, r0
 800291a:	eb43 0501 	adc.w	r5, r3, r1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	461a      	mov	r2, r3
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fd fc74 	bl	8000218 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800293e:	d308      	bcc.n	8002952 <UART_SetConfig+0x3de>
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002946:	d204      	bcs.n	8002952 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	e0c2      	b.n	8002ad8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	76bb      	strb	r3, [r7, #26]
 8002956:	e0bf      	b.n	8002ad8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002960:	d165      	bne.n	8002a2e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8002962:	7efb      	ldrb	r3, [r7, #27]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d828      	bhi.n	80029ba <UART_SetConfig+0x446>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <UART_SetConfig+0x3fc>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	08002995 	.word	0x08002995
 8002974:	0800299d 	.word	0x0800299d
 8002978:	080029a5 	.word	0x080029a5
 800297c:	080029bb 	.word	0x080029bb
 8002980:	080029ab 	.word	0x080029ab
 8002984:	080029bb 	.word	0x080029bb
 8002988:	080029bb 	.word	0x080029bb
 800298c:	080029bb 	.word	0x080029bb
 8002990:	080029b3 	.word	0x080029b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002994:	f7ff fac4 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002998:	6178      	str	r0, [r7, #20]
        break;
 800299a:	e013      	b.n	80029c4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800299c:	f7ff fad6 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 80029a0:	6178      	str	r0, [r7, #20]
        break;
 80029a2:	e00f      	b.n	80029c4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029a4:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <UART_SetConfig+0x590>)
 80029a6:	617b      	str	r3, [r7, #20]
        break;
 80029a8:	e00c      	b.n	80029c4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029aa:	f7ff fa4b 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 80029ae:	6178      	str	r0, [r7, #20]
        break;
 80029b0:	e008      	b.n	80029c4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b6:	617b      	str	r3, [r7, #20]
        break;
 80029b8:	e004      	b.n	80029c4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	76bb      	strb	r3, [r7, #26]
        break;
 80029c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8086 	beq.w	8002ad8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	4a4b      	ldr	r2, [pc, #300]	; (8002b00 <UART_SetConfig+0x58c>)
 80029d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029d6:	461a      	mov	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fbb3 f3f2 	udiv	r3, r3, r2
 80029de:	005a      	lsls	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	441a      	add	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	d916      	bls.n	8002a28 <UART_SetConfig+0x4b4>
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d212      	bcs.n	8002a28 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f023 030f 	bic.w	r3, r3, #15
 8002a0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	89fa      	ldrh	r2, [r7, #14]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	e057      	b.n	8002ad8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	76bb      	strb	r3, [r7, #26]
 8002a2c:	e054      	b.n	8002ad8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a2e:	7efb      	ldrb	r3, [r7, #27]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d828      	bhi.n	8002a86 <UART_SetConfig+0x512>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <UART_SetConfig+0x4c8>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a61 	.word	0x08002a61
 8002a40:	08002a69 	.word	0x08002a69
 8002a44:	08002a71 	.word	0x08002a71
 8002a48:	08002a87 	.word	0x08002a87
 8002a4c:	08002a77 	.word	0x08002a77
 8002a50:	08002a87 	.word	0x08002a87
 8002a54:	08002a87 	.word	0x08002a87
 8002a58:	08002a87 	.word	0x08002a87
 8002a5c:	08002a7f 	.word	0x08002a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a60:	f7ff fa5e 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002a64:	6178      	str	r0, [r7, #20]
        break;
 8002a66:	e013      	b.n	8002a90 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7ff fa70 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8002a6c:	6178      	str	r0, [r7, #20]
        break;
 8002a6e:	e00f      	b.n	8002a90 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <UART_SetConfig+0x590>)
 8002a72:	617b      	str	r3, [r7, #20]
        break;
 8002a74:	e00c      	b.n	8002a90 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a76:	f7ff f9e5 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8002a7a:	6178      	str	r0, [r7, #20]
        break;
 8002a7c:	e008      	b.n	8002a90 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a82:	617b      	str	r3, [r7, #20]
        break;
 8002a84:	e004      	b.n	8002a90 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	76bb      	strb	r3, [r7, #26]
        break;
 8002a8e:	bf00      	nop
    }

    if (pclk != 0U)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d020      	beq.n	8002ad8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <UART_SetConfig+0x58c>)
 8002a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	fbb3 f2f2 	udiv	r2, r3, r2
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	441a      	add	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	d908      	bls.n	8002ad4 <UART_SetConfig+0x560>
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d204      	bcs.n	8002ad4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	e001      	b.n	8002ad8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002af4:	7ebb      	ldrb	r3, [r7, #26]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bdb0      	pop	{r4, r5, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	08003070 	.word	0x08003070
 8002b04:	00f42400 	.word	0x00f42400

08002b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01a      	beq.n	8002c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c06:	d10a      	bne.n	8002c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]
  }
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c5c:	f7fd ff54 	bl	8000b08 <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d10e      	bne.n	8002c8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f82f 	bl	8002ce2 <UART_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e025      	b.n	8002cda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d10e      	bne.n	8002cba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f819 	bl	8002ce2 <UART_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e00f      	b.n	8002cda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf2:	e062      	b.n	8002dba <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfa:	d05e      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7fd ff04 	bl	8000b08 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d11d      	bne.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e045      	b.n	8002dda <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d02e      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6a:	d126      	bne.n	8002dba <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d84:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e00f      	b.n	8002dda <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	bf0c      	ite	eq
 8002dca:	2301      	moveq	r3, #1
 8002dcc:	2300      	movne	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d08d      	beq.n	8002cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_UARTEx_DisableFifoMode+0x16>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e027      	b.n	8002e48 <HAL_UARTEx_DisableFifoMode+0x66>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	; 0x24
 8002e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e02d      	b.n	8002ec8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f84f 	bl	8002f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e02d      	b.n	8002f44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	; 0x24
 8002ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f811 	bl	8002f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d108      	bne.n	8002f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f6c:	e031      	b.n	8002fd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f6e:	2308      	movs	r3, #8
 8002f70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f72:	2308      	movs	r3, #8
 8002f74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	0e5b      	lsrs	r3, r3, #25
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	0f5b      	lsrs	r3, r3, #29
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	7b3a      	ldrb	r2, [r7, #12]
 8002f9a:	4911      	ldr	r1, [pc, #68]	; (8002fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8002f9c:	5c8a      	ldrb	r2, [r1, r2]
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002fa2:	7b3a      	ldrb	r2, [r7, #12]
 8002fa4:	490f      	ldr	r1, [pc, #60]	; (8002fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8002fa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	7b7a      	ldrb	r2, [r7, #13]
 8002fb8:	4909      	ldr	r1, [pc, #36]	; (8002fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8002fba:	5c8a      	ldrb	r2, [r1, r2]
 8002fbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002fc0:	7b7a      	ldrb	r2, [r7, #13]
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8002fc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	08003088 	.word	0x08003088
 8002fe4:	08003090 	.word	0x08003090

08002fe8 <__libc_init_array>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	4d0d      	ldr	r5, [pc, #52]	; (8003020 <__libc_init_array+0x38>)
 8002fec:	4c0d      	ldr	r4, [pc, #52]	; (8003024 <__libc_init_array+0x3c>)
 8002fee:	1b64      	subs	r4, r4, r5
 8002ff0:	10a4      	asrs	r4, r4, #2
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	42a6      	cmp	r6, r4
 8002ff6:	d109      	bne.n	800300c <__libc_init_array+0x24>
 8002ff8:	4d0b      	ldr	r5, [pc, #44]	; (8003028 <__libc_init_array+0x40>)
 8002ffa:	4c0c      	ldr	r4, [pc, #48]	; (800302c <__libc_init_array+0x44>)
 8002ffc:	f000 f820 	bl	8003040 <_init>
 8003000:	1b64      	subs	r4, r4, r5
 8003002:	10a4      	asrs	r4, r4, #2
 8003004:	2600      	movs	r6, #0
 8003006:	42a6      	cmp	r6, r4
 8003008:	d105      	bne.n	8003016 <__libc_init_array+0x2e>
 800300a:	bd70      	pop	{r4, r5, r6, pc}
 800300c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003010:	4798      	blx	r3
 8003012:	3601      	adds	r6, #1
 8003014:	e7ee      	b.n	8002ff4 <__libc_init_array+0xc>
 8003016:	f855 3b04 	ldr.w	r3, [r5], #4
 800301a:	4798      	blx	r3
 800301c:	3601      	adds	r6, #1
 800301e:	e7f2      	b.n	8003006 <__libc_init_array+0x1e>
 8003020:	080030a0 	.word	0x080030a0
 8003024:	080030a0 	.word	0x080030a0
 8003028:	080030a0 	.word	0x080030a0
 800302c:	080030a4 	.word	0x080030a4

08003030 <memset>:
 8003030:	4402      	add	r2, r0
 8003032:	4603      	mov	r3, r0
 8003034:	4293      	cmp	r3, r2
 8003036:	d100      	bne.n	800303a <memset+0xa>
 8003038:	4770      	bx	lr
 800303a:	f803 1b01 	strb.w	r1, [r3], #1
 800303e:	e7f9      	b.n	8003034 <memset+0x4>

08003040 <_init>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr

0800304c <_fini>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr
